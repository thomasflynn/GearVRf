/* Copyright 2015 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gearvrf;

import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/** Wrapper for a GL texture. */
public class GVRTexture extends GVRHybridObject {
    private List<GVRAtlasInformation> mAtlasInformation = null;
    private String mVertexTexCoord = null;
    private String mShaderTexCoord = null;

    protected GVRTexture(GVRContext gvrContext, long ptr) {
        super(gvrContext, ptr);

        mLock = new ReentrantLock();
        mCondition = mLock.newCondition();
    }

    /**
     * Get the ID generated by {@code glGenTextures()}. Do not use this in loops as
     * each and every call will wait for about 16ms.
     * 
     * @return The GL ID of the texture.
     * @deprecated
     */
    public int getId() {
        if (0 != mTextureId) {
            return mTextureId;
        }

        final CountDownLatch cdl = new CountDownLatch(1);
        getGVRContext().runOnGlThread(new Runnable() {
            @Override
            public void run() {
                mTextureId = NativeTexture.getId(getNative());
                cdl.countDown();
            }
        });
        try
        {
            cdl.await();
        } catch (final Exception exc) {
            throw new IllegalStateException("Unable to obtain texture id");
        }
        return mTextureId;
    }

    public synchronized Future<Integer> getFutureId() {
        if (null != mFuture) {
            return mFuture;
        }

        if (0 != mTextureId) {
            mFuture = new FutureBase();
            return mFuture;
        }

        mFuture = new RealFuture();
        return mFuture;
    }

    /**
     * Update the texture parameters {@link GVRTextureParameters} after the
     * texture has been created.
     */
    public void updateTextureParameters(GVRTextureParameters textureParameters) {
        NativeTexture.updateTextureParameters(getNative(),
                textureParameters.getCurrentValuesArray());
    }

    /**
     * Returns the list of atlas information necessary to map
     * the texture atlas to each scene object.
     *
     * @return List of atlas information.
     */
    public List<GVRAtlasInformation> getAtlasInformation() {
        return mAtlasInformation;
    }

    /**
     * Set the list of {@link GVRAtlasInformation} to map the texture atlas
     * to each object of the scene.
     *
     * @param atlasInformation Atlas information to map the texture atlas to each
     *        scene object.
     */
    public void setAtlasInformation(List<GVRAtlasInformation> atlasInformation) {
        mAtlasInformation = atlasInformation;
    }

    /**
     * Inform if the texture is a large image containing "atlas" of sub-images
     * with a list of {@link GVRAtlasInformation} necessary to map it to the
     * scene objects.
     *
     * @return True if the texture is a large image containing "atlas",
     *         otherwise it returns false.
     */
    public boolean isAtlasedTexture() {
        return mAtlasInformation != null
            && !mAtlasInformation.isEmpty();
    }

    /**
     * Called from C++, on the GL thread; derived classes: call the super
     * implementation first always!
     * @param id
     */
    @SuppressWarnings("unused")
    protected synchronized void idAvailable(final int id) {
        mTextureId = id;
        if (null != mFuture) {
            mFuture.signal();
        }
    }

    private final ReentrantLock mLock;
    private final Condition mCondition;

    private volatile FutureBase mFuture;
    protected volatile int mTextureId;
    protected boolean mHasTransparency = false;

    protected boolean hasTransparency() {
        return mHasTransparency;
    }

    protected void setHasTransparency(boolean hasTransparency) {
        mHasTransparency = hasTransparency;
    }

    private class FutureBase implements Future<Integer> {
        @Override
        public Integer get() throws InterruptedException, ExecutionException {
            return mTextureId;
        }

        @Override
        public Integer get(long timeout, TimeUnit unit)
                throws InterruptedException, ExecutionException, TimeoutException {
            return get();
        }

        @Override
        public boolean cancel(boolean mayInterruptIfRunning) {
            throw new UnsupportedOperationException();
        }

        @Override
        public boolean isCancelled() {
            return false;
        }

        @Override
        public boolean isDone() {
            return true;
        }

        void signal() {
        }
    }

    private final class RealFuture extends FutureBase {
        RealFuture() {
            //schedules the gl texture for creation asap
            getGVRContext().runOnGlThread(new Runnable() {
                @Override
                public void run() {
                    mTextureId = NativeTexture.getId(getNative());
                }
            });
        }

        @Override
        public boolean isDone() {
            return 0 != mTextureId;
        }

        @Override
        public Integer get(long timeout, TimeUnit unit)
                throws InterruptedException, ExecutionException, TimeoutException {
            mLock.lock();
            try {
                if (!mCondition.await(timeout, unit)) {
                    throw new TimeoutException();
                }
            } finally {
                mLock.unlock();
            }
            return mTextureId;
        }

        @Override
        public Integer get() throws InterruptedException, ExecutionException {
            if (getGVRContext().isCurrentThreadGLThread()) {
                return mTextureId = NativeTexture.getId(getNative());
            }

            mLock.lock();
            try {
                while (0 == mTextureId) {
                    mCondition.await();
                }
            } finally {
                mLock.unlock();
            }

            return mTextureId;
        }

        @Override
        void signal() {
            mLock.lock();
            try {
                mCondition.signalAll();
            } finally {
                mLock.unlock();
            }
        }
    }

    /**
     *  Sets the name of the texture coordinate vertex
     *  attribute to use for this texture and what shader
     *  output is is assigned to.
     *  This allows a texture to be used with any set
     *  of texture coordinates from a mesh.
     *  Initially this parameter is null. You may set it once
     *  but then it cannot be changed afterwards.
     *  This is because it is used to generate code for the
     *  fragment shader and updating it would require the
     *  shader to be recompiled.
     * @param vertexTexCoord string with name of texture coordinate attribute in vertex.
     * @param shaderVariable string with name of shader variable to get the texture coordinates.
     * @throws UnsupportedOperationException if you change variables more than once.
     */
    public void setTexCoords(String vertexTexCoord, String shaderVariable) throws UnsupportedOperationException
    {
        if (mVertexTexCoord != null)
        {
            throw new UnsupportedOperationException("The texture coordinate attribute can only be set once and then it cannot be changed");
        }
        mVertexTexCoord = vertexTexCoord;
        mShaderTexCoord = shaderVariable;
    }

    /**
     *  Gets the name of the texture coordinate vertex
     *  attribute to use for this texture.
     *  This allows a texture to be used with any set
     *  of texture coordinates from a mesh.
     * @return name of texture coordinate attribute
     */
    public String getVertexTexCoord()
    {
        return mVertexTexCoord;
    }

    /**
     *  Gets the name of the shader variable used to store
     *  texture coordinates for this texture.
     *  This allows a texture to be used with any set
     *  of texture coordinates from a mesh.
     * @return name of texture coordinate shader variable
     */
    public String getShaderTexCoord()
    {
        return mShaderTexCoord;
    }


    protected static final String TAG = "GVRTexture";
}

class NativeTexture {
    static native int getId(long texture);

    static native void updateTextureParameters(long texture,
            int[] textureParametersValues);
}
